import React, { useState } from "react";
import Accordion from "react-bootstrap/Accordion";
import { sendVPNRules } from "../api"; // ğŸ”¥ API entegrasyonu eklendi

const VPNRules = () => {
  const [rules, setRules] = useState([]);
  const [formData, setFormData] = useState({
    ruleType: "vpn",
    sourceIP: "",
    destinationIP: "",
    protocol: "TCP",
    portRange: "",
  });

  const [ipError, setIpError] = useState("");
  const [portError, setPortError] = useState("");
  const [requiredError, setRequiredError] = useState("");

  const handleInputChange = (e) => {
    const { name, value } = e.target;

    // IP doÄŸrulama
    if (name === "sourceIP" || name === "destinationIP") {
      const ipRegex =
        /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$/;

      if (!ipRegex.test(value) && value !== "") {
        setIpError(
          `${
            name === "sourceIP" ? "Kaynak" : "Hedef"
          } IP formatÄ± hatalÄ±! Ã–rnek: 192.168.1.10`
        );
      } else {
        setIpError("");
      }
    }

    // Port doÄŸrulama
    if (name === "portRange") {
      const portRegex = /^[0-9]+(-[0-9]+)?$/;

      if (!portRegex.test(value) && value !== "") {
        setPortError("Port aralÄ±ÄŸÄ± hatalÄ±! Ã–rnek: 80 veya 8000-8080");
      } else {
        setPortError("");
      }
    }

    setFormData({ ...formData, [name]: value });
  };

  const handleAddRule = () => {
    // Zorunlu alan kontrolÃ¼
    if (!formData.sourceIP || !formData.destinationIP) {
      setRequiredError("LÃ¼tfen tÃ¼m zorunlu alanlarÄ± doldurun.");
      return;
    }

    if (ipError || portError) {
      alert("LÃ¼tfen formdaki hatalarÄ± dÃ¼zeltin.");
      return;
    }

    setRequiredError("");
    setRules([...rules, formData]);
    setFormData({
      ruleType: "vpn",
      sourceIP: "",
      destinationIP: "",
      protocol: "TCP",
      portRange: "",
    });
  };

  const handleDeleteRule = (index) => {
    const updatedRules = rules.filter((_, i) => i !== index);
    setRules(updatedRules);
  };

  const handleSubmitToOpenWRT = async () => {
    try {
      console.log("ğŸ”¥ API'ye gÃ¶nderilen veriler:", rules);
      const response = await sendVPNRules(rules);
      console.log("ğŸ”¥ API YanÄ±tÄ±:", response);

      alert("VPN ve NAT kurallarÄ± baÅŸarÄ±yla gÃ¶nderildi!");
    } catch (error) {
      console.error("ğŸ”¥ API Hata YanÄ±tÄ±:", error);
      alert("Kurallar gÃ¶nderilirken bir hata oluÅŸtu: " + error.message);
    }
  };

  return (
    <div className="container mt-4">
      <Accordion defaultActiveKey={null} className="mb-4">
        <Accordion.Item eventKey="0">
          <Accordion.Header>
            <span style={{ color: "green", fontWeight: "bold" }}>
              VPN ve NAT KurallarÄ± KullanÄ±mÄ±
            </span>
          </Accordion.Header>
          <Accordion.Body>
            <ul>
              <li>
                <strong>Kaynak IP:</strong> VPN veya NAT iÃ§in trafik baÅŸlatan cihazÄ±n IP adresi.
                <em>(Ã–rnek: 192.168.1.10)</em>
              </li>
              <li>
                <strong>Hedef IP:</strong> TrafiÄŸin yÃ¶nlendirileceÄŸi veya eriÅŸim saÄŸlanacaÄŸÄ± IP adresi.
                <em>(Ã–rnek: 8.8.8.8)</em>
              </li>
              <li>
                <strong>Protokol:</strong> TCP, UDP gibi aÄŸ protokolleri. VPN iÃ§in genellikle UDP kullanÄ±lÄ±r.
              </li>
              <li>
                <strong>Port AralÄ±ÄŸÄ±:</strong> YÃ¶nlendirme yapÄ±lacak veya izin verilecek portlar.
                <em>(Ã–rnek: 1194 veya 8000-8080)</em>
              </li>
            </ul>
          </Accordion.Body>
        </Accordion.Item>
      </Accordion>

      <h2 className="text-success">VPN ve NAT KurallarÄ±</h2>
      <p>
        VPN ve NAT KurallarÄ±, aÄŸ trafiÄŸini yÃ¶nlendirmek, gÃ¼venli baÄŸlantÄ±lar
        saÄŸlamak ve cihazlarÄ±n internet eriÅŸimini dÃ¼zenlemek iÃ§in kullanÄ±lan
        yapÄ±landÄ±rmalardÄ±r. VPN kurallarÄ± gÃ¼venli ve ÅŸifreli baÄŸlantÄ±lar
        oluÅŸtururken, NAT kurallarÄ± cihazlarÄ±n dÄ±ÅŸ dÃ¼nyayla iletiÅŸim kurmasÄ±nÄ±
        veya dÄ±ÅŸarÄ±dan eriÅŸilmesini saÄŸlar.
      </p>
      <p>
        <strong>Neden KullanÄ±lÄ±r? </strong>aÄŸ gÃ¼venliÄŸini artÄ±rmak, cihazlarÄ±n
        internete eriÅŸimini dÃ¼zenlemek, uzaktan gÃ¼venli baÄŸlantÄ±lar oluÅŸturmak
        ve iÃ§ aÄŸ cihazlarÄ±nÄ±n dÄ±ÅŸ dÃ¼nyayla iletiÅŸimini saÄŸlamak iÃ§in kullanÄ±lÄ±r.
      </p>

      <div className="card p-4 mb-4 shadow-sm">
        <h5>Kural Ekle</h5>
        <div className="row g-3">
          <div className="col-md-4">
            <label>Kaynak IP</label>
            <input
              type="text"
              className="form-control"
              name="sourceIP"
              value={formData.sourceIP}
              onChange={handleInputChange}
              placeholder="Ã–r: 192.168.1.10"
            />
            {ipError && <small className="text-danger">{ipError}</small>}
          </div>
          <div className="col-md-4">
            <label>Hedef IP </label>
            <input
              type="text"
              className="form-control"
              name="destinationIP"
              value={formData.destinationIP}
              onChange={handleInputChange}
              placeholder="Ã–r: 8.8.8.8"
            />
            {ipError && <small className="text-danger">{ipError}</small>}
          </div>
          <div className="col-md-4">
            <label>Protokol</label>
            <select
              className="form-select"
              name="protocol"
              value={formData.protocol}
              onChange={handleInputChange}
            >
              <option value="TCP">TCP</option>
              <option value="UDP">UDP</option>
            </select>
          </div>
          <div className="col-md-4">
            <label>Port AralÄ±ÄŸÄ± (Opsiyonel)</label>
            <input
              type="text"
              className="form-control"
              name="portRange"
              value={formData.portRange}
              onChange={handleInputChange}
              placeholder="Ã–r: 1194 veya 8000-8080"
            />
            {portError && <small className="text-danger">{portError}</small>}
          </div>
          <div className="col-md-4">
            <label>Kural TÃ¼rÃ¼</label>
            <select
              className="form-select"
              name="ruleType"
              value={formData.ruleType}
              onChange={handleInputChange}
            >
              <option value="vpn">VPN</option>
              <option value="nat">NAT</option>
            </select>
          </div>
        </div>
        {requiredError && <small className="text-danger mt-2">{requiredError}</small>}
        <button className="btn btn-success mt-3" onClick={handleAddRule}>
          Kural Ekle
        </button>
      </div>

      <div className="card p-4 shadow-sm">
        <h5>Eklenen Kurallar</h5>
        {rules.length > 0 ? (
          <ul className="list-group">
            {rules.map((rule, index) => (
              <li key={index} className="list-group-item d-flex justify-content-between align-items-center">
                <span>{rule.sourceIP} â†’ {rule.destinationIP} ({rule.protocol}, {rule.portRange || "TÃ¼m Portlar"}) - {rule.ruleType === "vpn" ? "VPN" : "NAT"}</span>
                <button className="btn btn-danger btn-sm" onClick={() => handleDeleteRule(index)}>Sil</button>
              </li>
            ))}
          </ul>
        ) : (<p>HenÃ¼z bir kural eklenmedi.</p>)}
      </div>

      <button className="btn btn-success mt-4" onClick={handleSubmitToOpenWRT}>Firewall'a GÃ¶nder</button>
    </div>
  );
};

export default VPNRules;
